# === Vim-style keybindings for Tig (copied from jonas/tig) ===

bind generic h scroll-left
bind generic j move-down
bind generic k move-up
bind generic l scroll-right

bind generic g  none
bind generic gg move-first-line
bind generic gj next
bind generic gk previous
bind generic gp parent
bind generic gP back
bind generic gn view-next
bind generic g? view-help

bind main    G move-last-line
bind generic G move-last-line

bind generic <C-f> move-page-down
bind generic <C-b> move-page-up

bind generic v  none
bind generic vm view-main
bind generic vd view-diff
bind generic vl view-log
bind generic vt view-tree
bind generic vb view-blob
bind generic vx view-blame
bind generic vr view-refs
bind generic vs view-status
bind generic vu view-stage
bind generic vy view-stash
bind generic vg view-grep
bind generic vp view-pager
bind generic vh view-help

bind generic o  none
bind generic oo :toggle sort-order
bind generic os :toggle sort-field
bind generic on :toggle line-number
bind generic od :toggle date
bind generic oa :toggle author
bind generic og :toggle line-graphics
bind generic of :toggle file-name
bind generic op :toggle ignore-space
bind generic oi :toggle id
bind generic ot :toggle commit-title-overflow
bind generic oF :toggle file-filter
bind generic or :toggle commit-title-refs

bind generic @  none
bind generic @j :/^@@
bind generic @k :?^@@
bind generic @- :toggle diff-context -1
bind generic @+ :toggle diff-context +1

bind generic u  none
# bind generic uu status-update
bind generic ur status-revert
bind generic um status-merge
bind generic ul stage-update-line
bind generic up stage-update-part
bind generic us stage-split-chunk

bind generic c  none
bind generic cc !git commit
bind generic ca !?@git commit --amend --no-edit

# bind generic K view-help
bind generic <C-w><C-w> view-next

# === Custom additions ===

bind generic K previous
set ignore-case = smart-case
bind generic - status-update
bind main - ?git push origin
bind main ! ?+git reset --hard %(commit)
bind refs ! ?+git reset --hard origin/%(branch)
bind generic cp ?git cherry-pick %(commit)
bind generic co ?git checkout %(commit)
bind main R ?git rebase -i %(commit)^
bind diff R ?git rebase -i %(commit)^
bind main 1 ?+git revert --no-edit %(commit)
bind main 2 ?+git revert -n %(commit)
bind main 3 ?git revert %(commit)
bind refs MM ?git merge %(branch)
bind refs Mm ?git merge %(branch)
bind refs MS ?+git merge --squash %(branch)
bind refs Ms ?+git merge --squash %(branch)
bind refs 1 ?+git branch -d %(branch)
bind refs 2 ?+git branch -D %(branch)
bind refs 3 ?git push origin --delete %(branch)
bind refs P ?git remote prune origin
bind generic y none
bind generic yy +dash -c "printf %s %(commit) | pbcopy && echo Yank %(commit)"
bind generic yt +dash -c "printf %s '%(text)' | pbcopy && echo Yank '%(text)'"
bind generic ym +dash -c "git show -s --format=%B $(printf %s %(commit)) | pbcopy && echo Yank commit message for %(commit)"
bind generic yl +dash -c "printf %s \"$(git show -s --format=%B $(printf %s %(commit)) | head -n 1)\" | pbcopy && printf 'Yank %s' \"$(pbpaste)\""
bind generic yb +dash -c "printf %s '%(branch)' | pbcopy && echo Yank %(branch)"
